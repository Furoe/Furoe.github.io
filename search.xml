<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue生命周期</title>
      <link href="2020/11/14/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2020/11/14/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue的生命周期"><a href="#Vue的生命周期" class="headerlink" title="Vue的生命周期"></a>Vue的生命周期</h4><p>最近因为碰到取值问题打算好好看下Vue的生命周期，之前只是简单的了解了下Vue的生命周期。浅略的知道分为beforeCreate、created、beforeMount、mounted、beforeDestroy、destroyed，但是对于在这之间Vue的不同阶段到底做了什么不甚了解。</p><h5 id="vue的源码"><a href="#vue的源码" class="headerlink" title="vue的源码"></a>vue的源码</h5><p>分析生命周期，我们首先得从创建vue实例开始。<br>在<code>new Vue()</code>的时候，<code>vue/src/core/instance/index.js</code>中的<code>_init()</code>负责初始化各个功能。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params">process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !(<span class="built_in">this</span> instance Vue)</span>)</span>&#123;</span><br><span class="line">        warn(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>._init(options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_init</code>中的执行顺序为下</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">initLifeClircle(vm)</span><br><span class="line">initEvents(vm)</span><br><span class="line">initRender(vm)</span><br><span class="line">callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">initInjections(vm)  <span class="comment">//resolve injections before data/props</span></span><br><span class="line">initState(vm)</span><br><span class="line">initProvide(vm)  <span class="comment">//resolve provide after data/props</span></span><br><span class="line">callHook(vm, <span class="string">&#x27;created&#x27;</span>)</span><br></pre></td></tr></table></figure><p>而在<code>initState()</code>中执行顺序如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(opts.props) initProps(vm, opts.props)  <span class="comment">//初始化props</span></span><br><span class="line"><span class="keyword">if</span>(opts.methods) initMethods(vm, opts.methods)  <span class="comment">//初始化methods</span></span><br><span class="line"><span class="function"><span class="title">if</span>(<span class="params">opts.data</span>)</span> &#123;</span><br><span class="line">    initData(vm, opts.data);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    observe(vm._data = &#123;&#125;, <span class="literal">true</span> <span class="comment">/* as root data*/</span>);  <span class="comment">//初始化data</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(opts.computed) initComputed(vm, opts.computed);  <span class="comment">//初始化computed</span></span><br></pre></td></tr></table></figure><p>可以看出先执行<code>props</code>，然后是<code>methods</code>，紧接着是<code>data</code>最后是<code>computed</code>。并且这个阶段是在<code>beforeCreated</code>和<code>created</code>之间，<br>所以使用computed中的数据时需要慎重。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> lifeCircle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新的开始</title>
      <link href="2020/11/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/"/>
      <url>2020/11/14/%E6%96%B0%E7%9A%84%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="重新搭建的原因"><a href="#重新搭建的原因" class="headerlink" title="重新搭建的原因"></a>重新搭建的原因</h4><p>因为以前的博客由于种种事由断更了很久，电脑也换了一个又一个。<br>原来的项目源文件已经丢失了，只剩下现在的编译之后的静态页面，<br>虽然是打算自己搭网站的，但是最近一直没空，先维护一下静态博客。</p><h4 id="使用的脚手架"><a href="#使用的脚手架" class="headerlink" title="使用的脚手架"></a>使用的脚手架</h4><p>依然是<a href="https://hexo.io/">hexo</a>，不过主题这次选择melody，<a href="https://molunerfinn.com/hexo-theme-melody-doc/">melody相关配置</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> melody </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/11/14/hello-world/"/>
      <url>2020/11/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
